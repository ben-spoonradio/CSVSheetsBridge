#!/usr/bin/env python3
"""
ÏàòÏãù Í∏∞Î∞ò Appsflyer Îç∞Ïù¥ÌÑ∞ ÏûêÎèôÌôî Ïä§ÌÅ¨Î¶ΩÌä∏
- Î©îÏù∏ Îç∞Ïù¥ÌÑ∞: Ïã§Ï†ú Í∞íÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
- ÏöîÏïΩ/ÏÉÅÏúÑÏÑ±Í≥º/ÌîºÎ≤ó: ÏàòÏãùÏúºÎ°ú Î©îÏù∏ Îç∞Ïù¥ÌÑ∞ Ï∞∏Ï°∞
"""

import argparse
import sys
import os
from pathlib import Path
from datetime import datetime
import logging

# src ÎîîÎ†âÌÜ†Î¶¨Î•º Python Í≤ΩÎ°úÏóê Ï∂îÍ∞Ä
current_dir = Path(__file__).parent
src_dir = current_dir / 'src'
sys.path.insert(0, str(src_dir))

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('appsflyer_automation_formula.log')
    ]
)
logger = logging.getLogger(__name__)

# Î™®Îìà import
try:
    from appsflyer_processor_adapted import AppsflyerDataProcessorAdapted
    from sheets_updater import SheetsUpdater
    from dotenv import load_dotenv
except ImportError as e:
    logger.error(f"ÌïÑÏàò Î™®Îìà import Ïã§Ìå®: {e}")
    print("‚ùå ÌïÑÏàò Î™®ÎìàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. src/ ÎîîÎ†âÌÜ†Î¶¨ÏôÄ ÌååÏùºÎì§Ïù¥ Ïò¨Î∞îÎ•∏ÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî.")
    sys.exit(1)

# ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú
load_dotenv()


class AppsflyerFormulaAutomation:
    """ÏàòÏãù Í∏∞Î∞ò Appsflyer Îç∞Ïù¥ÌÑ∞ ÏûêÎèôÌôî Î©îÏù∏ ÌÅ¥ÎûòÏä§"""

    def __init__(self):
        """Ï¥àÍ∏∞Ìôî"""
        self.processor = None
        self.updater = None
        self.setup_logging()

    def setup_logging(self):
        """Î°úÍπÖ ÏÑ§Ï†ï"""
        # Í≤∞Í≥º Î°úÍ∑∏Ïö© Î≥ÑÎèÑ Î°úÍ±∞
        self.result_logger = logging.getLogger('automation_results_formula')
        handler = logging.FileHandler('automation_results_formula.log')
        formatter = logging.Formatter('%(asctime)s - %(message)s')
        handler.setFormatter(formatter)
        self.result_logger.addHandler(handler)
        self.result_logger.setLevel(logging.INFO)

    def validate_environment(self):
        """ÌôòÍ≤Ω ÏÑ§Ï†ï Í≤ÄÏ¶ù"""
        logger.info("ÌôòÍ≤Ω ÏÑ§Ï†ï Í≤ÄÏ¶ù ÏãúÏûë")

        required_env_vars = [
            'GOOGLE_SHEETS_WEB_APP_URL',
            'GOOGLE_SHEETS_SHEET_ID'
        ]

        missing_vars = []
        for var in required_env_vars:
            if not os.getenv(var):
                missing_vars.append(var)

        if missing_vars:
            logger.error(f"ÎàÑÎùΩÎêú ÌôòÍ≤ΩÎ≥ÄÏàò: {missing_vars}")
            print("‚ùå Îã§Ïùå ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§:")
            for var in missing_vars:
                print(f"   - {var}")
            print("\\n.env ÌååÏùºÏùÑ ÌôïÏù∏ÌïòÍ±∞ÎÇò ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.")
            return False

        logger.info("ÌôòÍ≤Ω ÏÑ§Ï†ï Í≤ÄÏ¶ù ÏôÑÎ£å")
        return True

    def analyze_csv_structure(self, csv_path: str):
        """CSV Íµ¨Ï°∞ Î∂ÑÏÑù Î∞è Ï∂úÎ†•"""
        try:
            import pandas as pd
            df = pd.read_csv(csv_path, encoding='utf-8-sig', nrows=5)

            print("üìä CSV ÌååÏùº Íµ¨Ï°∞ Î∂ÑÏÑù")
            print("=" * 50)
            print(f"ÌååÏùº: {csv_path}")
            print(f"Ï¥ù Ìñâ Ïàò: {len(pd.read_csv(csv_path, encoding='utf-8-sig'))} Ìñâ")
            print(f"Ïª¨Îüº Ïàò: {len(df.columns)} Í∞ú")
            print("\\nÏª¨Îüº Î™©Î°ù:")
            for i, col in enumerate(df.columns, 1):
                print(f"  {i}. {col}")

            print("\\nÏÉòÌîå Îç∞Ïù¥ÌÑ∞ (Ï≤òÏùå 3Ìñâ):")
            for i, row in df.head(3).iterrows():
                print(f"  Ìñâ {i+2}: {row.iloc[0]} | ${row.iloc[1] if len(row) > 1 else 'N/A'}")

            print()

        except Exception as e:
            print(f"‚ö†Ô∏è CSV Íµ¨Ï°∞ Î∂ÑÏÑù Ï§ë Ïò§Î•ò: {str(e)}")

    def process_data(self, csv_path: str) -> tuple:
        """Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨"""
        logger.info(f"Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏãúÏûë: {csv_path}")
        print(f"üìä ÏàòÏãù Í∏∞Î∞ò Appsflyer Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏãúÏûë: {csv_path}")

        try:
            # CSV ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏
            if not os.path.exists(csv_path):
                raise FileNotFoundError(f"CSV ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {csv_path}")

            # CSV Íµ¨Ï°∞ Î∂ÑÏÑù
            self.analyze_csv_structure(csv_path)

            # Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨Í∏∞ Ï¥àÍ∏∞Ìôî
            self.processor = AppsflyerDataProcessorAdapted(csv_path)

            # Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ïã§Ìñâ
            print("   üîÑ Îç∞Ïù¥ÌÑ∞ Î°úÎî© Î∞è Ï†ïÏ†ú Ï§ë...")
            processed_data = self.processor.process()

            print("   ‚úÖ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏôÑÎ£å")

            # ÏöîÏïΩ ÌÜµÍ≥Ñ ÏÉùÏÑ±
            stats = self.processor.get_summary_stats()

            # Í≤∞Í≥º Î°úÍπÖ
            self.result_logger.info(f"Data processing completed - {stats.get('total_contents', 0)} contents processed")

            return processed_data, stats

        except Exception as e:
            logger.error(f"Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: {str(e)}")
            print(f"‚ùå Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ïã§Ìå®: {str(e)}")
            raise

    def create_formula_based_updater(self):
        """ÏàòÏãù Í∏∞Î∞ò ÏóÖÎç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
        from sheets_client import GoogleSheetsClient

        class FormulaBasedSheetsUpdater(SheetsUpdater):
            """ÏàòÏãù Í∏∞Î∞ò ÏãúÌä∏ ÏóÖÎç∞Ïù¥ÌÑ∞"""

            def create_summary_formula_data(self, main_sheet_name: str = "Î©îÏù∏Îç∞Ïù¥ÌÑ∞") -> list:
                """ÏöîÏïΩ ÏãúÌä∏Ïö© ÏàòÏãù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
                return [
                    ['Ìï≠Î™©', 'Í∞í'],
                    ['Ï¥ù ÏΩòÌÖêÏ∏† Ïàò', f'=COUNTA({main_sheet_name}!A:A)-1'],
                    ['Ï¥ù ÎπÑÏö©', f'=SUM({main_sheet_name}!B:B)'],
                    ['Ï¥ù ÏÑ§Ïπò Ïàò', f'=SUM({main_sheet_name}!E:E)'],
                    ['Ï¥ù D1 Ïú†ÏßÄ Ïú†Ï†Ä', f'=SUM({main_sheet_name}!G:G)'],
                    ['ÌèâÍ∑† D1 Retained CAC', f'=AVERAGE({main_sheet_name}!P:P)'],
                    ['ÌèâÍ∑† CPI', f'=AVERAGE({main_sheet_name}!N:N)'],
                    ['ÌèâÍ∑† CTR', f'=AVERAGE({main_sheet_name}!O:O)'],
                    ['ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
                    ['', ''],
                    ['üì± Îß§Ï≤¥Î≥Ñ Î∂ÑÌè¨', ''],
                    ['Echo', f'=COUNTIF({main_sheet_name}!H:H,"echo")'],
                    ['TikTok', f'=COUNTIF({main_sheet_name}!H:H,"tiktok")'],
                    ['Innoceans', f'=COUNTIF({main_sheet_name}!H:H,"innoceans")'],
                    ['Spoon', f'=COUNTIF({main_sheet_name}!H:H,"spoon")'],
                    ['Í∏∞ÌÉÄ', f'=COUNTIF({main_sheet_name}!H:H,"unknown")'],
                    ['', ''],
                    ['üèÜ ÏÑ±Í≥º Îì±Í∏â Î∂ÑÌè¨', ''],
                    ['AÎì±Í∏â', f'=COUNTIF({main_sheet_name}!Z:Z,"A")'],
                    ['BÎì±Í∏â', f'=COUNTIF({main_sheet_name}!Z:Z,"B")'],
                    ['CÎì±Í∏â', f'=COUNTIF({main_sheet_name}!Z:Z,"C")'],
                    ['DÎì±Í∏â', f'=COUNTIF({main_sheet_name}!Z:Z,"D")']
                ]

            def create_top_performers_formula_data(self, main_sheet_name: str = "Î©îÏù∏Îç∞Ïù¥ÌÑ∞") -> list:
                """ÏÉÅÏúÑ ÏÑ±Í≥º ÏãúÌä∏Ïö© ÏàòÏãù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
                data = [
                    ['ÏàúÏúÑ', 'ÏΩòÌÖêÏ∏†Î™Ö', 'Îß§Ï≤¥', 'ÌÖåÎßà', 'Îì±Í∏â', 'D1 Retained CAC', 'ÎπÑÏö©', 'ÏÑ§Ïπò Ïàò', 'D1 Ïú†ÏßÄ Ïú†Ï†Ä']
                ]

                # TOP 10 Í¥ëÍ≥†Î•º ÏàòÏãùÏúºÎ°ú ÏÉùÏÑ±
                for i in range(1, 11):
                    row_num = i + 1  # Ìó§Îçî Ï†úÏô∏
                    data.append([
                        str(i),
                        f'=INDEX(SORT({main_sheet_name}!A2:Z1000,{main_sheet_name}!Y2:Y1000,1),{i},1)',  # ÏΩòÌÖêÏ∏†Î™Ö (overall_rank Í∏∞Ï§Ä Ï†ïÎ†¨)
                        f'=INDEX(SORT({main_sheet_name}!A2:Z1000,{main_sheet_name}!Y2:Y1000,1),{i},8)',  # Îß§Ï≤¥
                        f'=INDEX(SORT({main_sheet_name}!A2:Z1000,{main_sheet_name}!Y2:Y1000,1),{i},9)',  # ÌÖåÎßà
                        f'=INDEX(SORT({main_sheet_name}!A2:Z1000,{main_sheet_name}!Y2:Y1000,1),{i},26)', # Îì±Í∏â
                        f'=INDEX(SORT({main_sheet_name}!A2:Z1000,{main_sheet_name}!Y2:Y1000,1),{i},16)', # D1 CAC
                        f'=INDEX(SORT({main_sheet_name}!A2:Z1000,{main_sheet_name}!Y2:Y1000,1),{i},2)',  # ÎπÑÏö©
                        f'=INDEX(SORT({main_sheet_name}!A2:Z1000,{main_sheet_name}!Y2:Y1000,1),{i},5)',  # ÏÑ§Ïπò
                        f'=INDEX(SORT({main_sheet_name}!A2:Z1000,{main_sheet_name}!Y2:Y1000,1),{i},7)'   # D1 Ïú†ÏßÄ
                    ])

                return data

            def create_pivot_formula_data(self, main_sheet_name: str = "Î©îÏù∏Îç∞Ïù¥ÌÑ∞") -> list:
                """ÌîºÎ≤ó ÌÖåÏù¥Î∏î ÏàòÏãù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
                return [
                    ['Îß§Ï≤¥Î≥Ñ ÏÑ±Í≥º Î∂ÑÏÑù', '', '', ''],
                    ['Îß§Ï≤¥', 'ÌèâÍ∑† D1 CAC', 'Ï¥ù ÎπÑÏö©', 'Ï¥ù ÏÑ§Ïπò Ïàò'],
                    ['Echo',
                     f'=AVERAGEIF({main_sheet_name}!H:H,"echo",{main_sheet_name}!P:P)',
                     f'=SUMIF({main_sheet_name}!H:H,"echo",{main_sheet_name}!B:B)',
                     f'=SUMIF({main_sheet_name}!H:H,"echo",{main_sheet_name}!E:E)'],
                    ['TikTok',
                     f'=AVERAGEIF({main_sheet_name}!H:H,"tiktok",{main_sheet_name}!P:P)',
                     f'=SUMIF({main_sheet_name}!H:H,"tiktok",{main_sheet_name}!B:B)',
                     f'=SUMIF({main_sheet_name}!H:H,"tiktok",{main_sheet_name}!E:E)'],
                    ['Innoceans',
                     f'=AVERAGEIF({main_sheet_name}!H:H,"innoceans",{main_sheet_name}!P:P)',
                     f'=SUMIF({main_sheet_name}!H:H,"innoceans",{main_sheet_name}!B:B)',
                     f'=SUMIF({main_sheet_name}!H:H,"innoceans",{main_sheet_name}!E:E)'],
                    ['Spoon',
                     f'=AVERAGEIF({main_sheet_name}!H:H,"spoon",{main_sheet_name}!P:P)',
                     f'=SUMIF({main_sheet_name}!H:H,"spoon",{main_sheet_name}!B:B)',
                     f'=SUMIF({main_sheet_name}!H:H,"spoon",{main_sheet_name}!E:E)'],
                    ['', '', '', ''],
                    ['ÌÖåÎßàÎ≥Ñ ÏÑ±Í≥º Î∂ÑÏÑù', '', '', ''],
                    ['ÌÖåÎßà', 'ÌèâÍ∑† D1 CAC', 'Ï¥ù ÎπÑÏö©', 'Ï¥ù ÏÑ§Ïπò Ïàò'],
                    ['Participation',
                     f'=AVERAGEIF({main_sheet_name}!I:I,"participation",{main_sheet_name}!P:P)',
                     f'=SUMIF({main_sheet_name}!I:I,"participation",{main_sheet_name}!B:B)',
                     f'=SUMIF({main_sheet_name}!I:I,"participation",{main_sheet_name}!E:E)'],
                    ['Blinddate',
                     f'=AVERAGEIF({main_sheet_name}!I:I,"blinddate",{main_sheet_name}!P:P)',
                     f'=SUMIF({main_sheet_name}!I:I,"blinddate",{main_sheet_name}!B:B)',
                     f'=SUMIF({main_sheet_name}!I:I,"blinddate",{main_sheet_name}!E:E)'],
                    ['Interest',
                     f'=AVERAGEIF({main_sheet_name}!I:I,"interest",{main_sheet_name}!P:P)',
                     f'=SUMIF({main_sheet_name}!I:I,"interest",{main_sheet_name}!B:B)',
                     f'=SUMIF({main_sheet_name}!I:I,"interest",{main_sheet_name}!E:E)'],
                    ['TPO',
                     f'=AVERAGEIF({main_sheet_name}!I:I,"tpo",{main_sheet_name}!P:P)',
                     f'=SUMIF({main_sheet_name}!I:I,"tpo",{main_sheet_name}!B:B)',
                     f'=SUMIF({main_sheet_name}!I:I,"tpo",{main_sheet_name}!E:E)']
                ]

            def update_summary_sheet_with_formulas(self, main_sheet_name: str = "Î©îÏù∏Îç∞Ïù¥ÌÑ∞", sheet_name: str = None) -> dict:
                """ÏàòÏãù Í∏∞Î∞ò ÏöîÏïΩ ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏"""
                if sheet_name is None:
                    sheet_name = self.sheet_config.get('summary_sheet', 'ÏöîÏïΩ')

                logger.info(f"ÏàòÏãù Í∏∞Î∞ò ÏöîÏïΩ ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë: {sheet_name}")

                # ÏãúÌä∏ Ï°¥Ïû¨ ÌôïÏù∏ Î∞è ÏÉùÏÑ±
                if not self.ensure_sheet_exists(sheet_name):
                    return {'success': False, 'error': f'ÏãúÌä∏ {sheet_name} ÏÉùÏÑ± Ïã§Ìå®'}

                try:
                    # ÏàòÏãù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
                    formula_data = self.create_summary_formula_data(main_sheet_name)

                    # ÏãúÌä∏ ÎçÆÏñ¥Ïì∞Í∏∞
                    result = self.client.overwrite_sheet(self.sheet_id, formula_data, sheet_name)

                    if result.get('success'):
                        logger.info(f"ÏàòÏãù Í∏∞Î∞ò ÏöîÏïΩ ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ: {len(formula_data)}Ìñâ")
                        return {'success': True, 'rows': len(formula_data)}
                    else:
                        logger.error(f"ÏöîÏïΩ ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {result.get('error')}")
                        return result

                except Exception as e:
                    logger.error(f"ÏöîÏïΩ ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•ò: {str(e)}")
                    return {'success': False, 'error': str(e)}

            def update_top_performers_sheet_with_formulas(self, main_sheet_name: str = "Î©îÏù∏Îç∞Ïù¥ÌÑ∞", sheet_name: str = None) -> dict:
                """ÏàòÏãù Í∏∞Î∞ò ÏÉÅÏúÑ ÏÑ±Í≥º ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏"""
                if sheet_name is None:
                    sheet_name = self.sheet_config.get('top_performers_sheet', 'ÏÉÅÏúÑÏÑ±Í≥º')

                logger.info(f"ÏàòÏãù Í∏∞Î∞ò ÏÉÅÏúÑ ÏÑ±Í≥º ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë: {sheet_name}")

                # ÏãúÌä∏ Ï°¥Ïû¨ ÌôïÏù∏ Î∞è ÏÉùÏÑ±
                if not self.ensure_sheet_exists(sheet_name):
                    return {'success': False, 'error': f'ÏãúÌä∏ {sheet_name} ÏÉùÏÑ± Ïã§Ìå®'}

                try:
                    # ÏàòÏãù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
                    formula_data = self.create_top_performers_formula_data(main_sheet_name)

                    # ÏãúÌä∏ ÎçÆÏñ¥Ïì∞Í∏∞
                    result = self.client.overwrite_sheet(self.sheet_id, formula_data, sheet_name)

                    if result.get('success'):
                        logger.info(f"ÏàòÏãù Í∏∞Î∞ò ÏÉÅÏúÑ ÏÑ±Í≥º ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ: {len(formula_data)}Ìñâ")
                        return {'success': True, 'rows': len(formula_data)}
                    else:
                        logger.error(f"ÏÉÅÏúÑ ÏÑ±Í≥º ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {result.get('error')}")
                        return result

                except Exception as e:
                    logger.error(f"ÏÉÅÏúÑ ÏÑ±Í≥º ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•ò: {str(e)}")
                    return {'success': False, 'error': str(e)}

            def update_pivot_sheet_with_formulas(self, main_sheet_name: str = "Î©îÏù∏Îç∞Ïù¥ÌÑ∞", sheet_name: str = None) -> dict:
                """ÏàòÏãù Í∏∞Î∞ò ÌîºÎ≤ó ÌÖåÏù¥Î∏î ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏"""
                if sheet_name is None:
                    sheet_name = self.sheet_config.get('pivot_table_sheet', 'ÌîºÎ≤óÌÖåÏù¥Î∏î')

                logger.info(f"ÏàòÏãù Í∏∞Î∞ò ÌîºÎ≤ó ÌÖåÏù¥Î∏î ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë: {sheet_name}")

                # ÏãúÌä∏ Ï°¥Ïû¨ ÌôïÏù∏ Î∞è ÏÉùÏÑ±
                if not self.ensure_sheet_exists(sheet_name):
                    return {'success': False, 'error': f'ÏãúÌä∏ {sheet_name} ÏÉùÏÑ± Ïã§Ìå®'}

                try:
                    # ÏàòÏãù Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
                    formula_data = self.create_pivot_formula_data(main_sheet_name)

                    # ÏãúÌä∏ ÎçÆÏñ¥Ïì∞Í∏∞
                    result = self.client.overwrite_sheet(self.sheet_id, formula_data, sheet_name)

                    if result.get('success'):
                        logger.info(f"ÏàòÏãù Í∏∞Î∞ò ÌîºÎ≤ó ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ: {len(formula_data)}Ìñâ")
                        return {'success': True, 'rows': len(formula_data)}
                    else:
                        logger.error(f"ÌîºÎ≤ó ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {result.get('error')}")
                        return result

                except Exception as e:
                    logger.error(f"ÌîºÎ≤ó ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•ò: {str(e)}")
                    return {'success': False, 'error': str(e)}

            def update_all_sheets_with_formulas(self, df, stats, main_sheet_name: str = "Î©îÏù∏Îç∞Ïù¥ÌÑ∞") -> dict:
                """Î™®Îì† ÏãúÌä∏Î•º ÏàòÏãù Í∏∞Î∞òÏúºÎ°ú ÏùºÍ¥Ñ ÏóÖÎç∞Ïù¥Ìä∏"""
                logger.info("ÏàòÏãù Í∏∞Î∞ò Ï†ÑÏ≤¥ ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë")

                results = {}

                # 1. Î©îÏù∏ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ (Ïã§Ï†ú Í∞í)
                results['main_data'] = self.update_main_data_sheet(df, main_sheet_name)

                # 2. ÏöîÏïΩ ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ (ÏàòÏãù)
                results['summary'] = self.update_summary_sheet_with_formulas(main_sheet_name)

                # 3. ÏÉÅÏúÑ ÏÑ±Í≥º ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ (ÏàòÏãù)
                results['top_performers'] = self.update_top_performers_sheet_with_formulas(main_sheet_name)

                # 4. ÌîºÎ≤ó ÌÖåÏù¥Î∏î ÏóÖÎç∞Ïù¥Ìä∏ (ÏàòÏãù)
                results['pivot_table'] = self.update_pivot_sheet_with_formulas(main_sheet_name)

                # Ï†ÑÏ≤¥ ÏÑ±Í≥µ Ïó¨Î∂Ä ÌåêÎã®
                all_success = all(result.get('success', False) for result in results.values())

                logger.info(f"ÏàòÏãù Í∏∞Î∞ò Ï†ÑÏ≤¥ ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å - ÏÑ±Í≥µ: {all_success}")

                return {
                    'overall_success': all_success,
                    'individual_results': results,
                    'summary': {
                        'successful_sheets': sum(1 for r in results.values() if r.get('success')),
                        'total_sheets': len(results),
                        'update_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    }
                }

        return FormulaBasedSheetsUpdater()

    def update_sheets(self, processed_data, stats, backup=False):
        """Google Sheets ÏóÖÎç∞Ïù¥Ìä∏ (ÏàòÏãù Í∏∞Î∞ò)"""
        logger.info("ÏàòÏãù Í∏∞Î∞ò Google Sheets ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë")
        print("üì§ ÏàòÏãù Í∏∞Î∞ò Google Sheets ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë...")

        try:
            # ÏàòÏãù Í∏∞Î∞ò Sheets ÏóÖÎç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
            self.updater = self.create_formula_based_updater()

            # Î∞±ÏóÖ ÏàòÌñâ (ÏÑ†ÌÉùÏ†Å)
            if backup:
                print("   üíæ ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ Ï§ë...")
                backup_result = self.updater.backup_current_data()
                if backup_result.get('success'):
                    print(f"   ‚úÖ Î∞±ÏóÖ ÏôÑÎ£å: {backup_result['backup_sheet']}")
                else:
                    print(f"   ‚ö†Ô∏è Î∞±ÏóÖ Ïã§Ìå®: {backup_result.get('error', 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò')}")

            # Î©îÏù∏ ÏãúÌä∏Î™Ö Í≤∞Ï†ï
            main_sheet_name = self.updater.sheet_config.get('main_data_sheet', 'Î©îÏù∏Îç∞Ïù¥ÌÑ∞')

            # Î™®Îì† ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ (ÏàòÏãù Í∏∞Î∞ò)
            print("   üîÑ ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...")
            print(f"   üìä Î©îÏù∏ Îç∞Ïù¥ÌÑ∞: Ïã§Ï†ú Í∞íÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏")
            print(f"   üìà ÏöîÏïΩ/ÏÑ±Í≥º/ÌîºÎ≤ó: ÏàòÏãùÏúºÎ°ú '{main_sheet_name}' Ï∞∏Ï°∞")

            update_results = self.updater.update_all_sheets_with_formulas(
                processed_data, stats, main_sheet_name
            )

            # Í≤∞Í≥º Ï∂úÎ†•
            if update_results['overall_success']:
                print("   ‚úÖ Î™®Îì† ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ!")
                success_count = update_results['summary']['successful_sheets']
                total_count = update_results['summary']['total_sheets']
                print(f"   üìä ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏãúÌä∏: {success_count}/{total_count}")
                print(f"   üîó Î©îÏù∏ Îç∞Ïù¥ÌÑ∞: Ïã§Ï†ú Í∞í")
                print(f"   üîó Í∏∞ÌÉÄ ÏãúÌä∏: '{main_sheet_name}' Ï∞∏Ï°∞ ÏàòÏãù")
            else:
                print("   ‚ö†Ô∏è ÏùºÎ∂Ä ÏãúÌä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®")
                # Í∞úÎ≥Ñ Í≤∞Í≥º Ï∂úÎ†•
                for sheet_type, result in update_results['individual_results'].items():
                    status = "‚úÖ" if result.get('success') else "‚ùå"
                    error_msg = result.get('error', 'Success')
                    if len(str(error_msg)) > 50:
                        error_msg = str(error_msg)[:47] + "..."
                    print(f"     {status} {sheet_type}: {error_msg}")

            # Í≤∞Í≥º Î°úÍπÖ
            self.result_logger.info(f"Formula-based sheets update completed - Success: {update_results['overall_success']}")

            return update_results

        except Exception as e:
            logger.error(f"Google Sheets ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•ò: {str(e)}")
            print(f"‚ùå Google Sheets ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {str(e)}")
            raise

    def print_summary_stats(self, stats):
        """ÏöîÏïΩ ÌÜµÍ≥Ñ Ï∂úÎ†•"""
        print("\\nüìà Ï≤òÎ¶¨ Í≤∞Í≥º ÏöîÏïΩ")
        print("=" * 60)

        print(f"Ï¥ù Í¥ëÍ≥† Ïàò: {stats.get('total_contents', 0):,}Í∞ú")
        print(f"Ï¥ù ÎπÑÏö©: ${stats.get('total_cost', 0):,.2f}")
        print(f"Ï¥ù ÏÑ§Ïπò Ïàò: {stats.get('total_installs', 0):,}Í∞ú")
        print(f"Ï¥ù D1 Ïú†ÏßÄ Ïú†Ï†Ä: {stats.get('total_d1_retained_users', 0):,}Î™Ö")

        # KPI ÌèâÍ∑†
        avg_cac = stats.get('avg_d1_retained_cac', 0)
        if avg_cac and avg_cac != float('inf'):
            print(f"ÌèâÍ∑† D1 Retained CAC: ${avg_cac:.2f}")

        avg_cpi = stats.get('avg_cpi', 0)
        if avg_cpi:
            print(f"ÌèâÍ∑† CPI: ${avg_cpi:.2f}")

        avg_ctr = stats.get('avg_ctr', 0)
        if avg_ctr:
            print(f"ÌèâÍ∑† CTR: {avg_ctr:.2f}%")

        # Îß§Ï≤¥Î≥Ñ Î∂ÑÌè¨
        media_dist = stats.get('media_distribution', {})
        if media_dist:
            print(f"\\nüì± Îß§Ï≤¥Î≥Ñ Î∂ÑÌè¨:")
            for media, count in media_dist.items():
                print(f"  {media}: {count:,}Í∞ú")

        # ÏÑ±Í≥º Îì±Í∏â Î∂ÑÌè¨
        grade_dist = stats.get('performance_grade_distribution', {})
        if grade_dist:
            print(f"\\nüèÜ ÏÑ±Í≥º Îì±Í∏â Î∂ÑÌè¨:")
            for grade, count in grade_dist.items():
                print(f"  {grade}Îì±Í∏â: {count:,}Í∞ú")

        print(f"\\nüìä ÏóÖÎç∞Ïù¥Ìä∏ Î∞©Ïãù:")
        print(f"  - Î©îÏù∏ Îç∞Ïù¥ÌÑ∞: Ïã§Ï†ú Ï≤òÎ¶¨Îêú Í∞íÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏")
        print(f"  - ÏöîÏïΩ ÏãúÌä∏: ÏàòÏãùÏúºÎ°ú Î©îÏù∏ Îç∞Ïù¥ÌÑ∞ Ï∞∏Ï°∞")
        print(f"  - ÏÉÅÏúÑ ÏÑ±Í≥º: ÏàòÏãùÏúºÎ°ú ÏûêÎèô Ï†ïÎ†¨ Î∞è Ï∂îÏ∂ú")
        print(f"  - ÌîºÎ≤ó ÌÖåÏù¥Î∏î: ÏàòÏãùÏúºÎ°ú ÎèôÏ†Å ÏßëÍ≥Ñ")

    def run(self, csv_path: str, backup: bool = False, export_csv: bool = False):
        """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
        start_time = datetime.now()

        print("üöÄ ÏàòÏãù Í∏∞Î∞ò Appsflyer Îç∞Ïù¥ÌÑ∞ ÏûêÎèôÌôî ÏãúÏûë")
        print("=" * 70)

        try:
            # 1. ÌôòÍ≤Ω Í≤ÄÏ¶ù
            if not self.validate_environment():
                return False

            # 2. Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
            processed_data, stats = self.process_data(csv_path)

            # 3. Google Sheets ÏóÖÎç∞Ïù¥Ìä∏ (ÏàòÏãù Í∏∞Î∞ò)
            update_results = self.update_sheets(processed_data, stats, backup)

            # 4. CSV ÎÇ¥Î≥¥ÎÇ¥Í∏∞ (ÏÑ†ÌÉùÏ†Å)
            if export_csv:
                output_path = f"processed_data_formula_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                self.processor.export_to_csv(output_path)
                print(f"üìÑ Ï≤òÎ¶¨Îêú Îç∞Ïù¥ÌÑ∞ CSV Ï†ÄÏû•: {output_path}")

            # 5. Í≤∞Í≥º ÏöîÏïΩ Ï∂úÎ†•
            self.print_summary_stats(stats)

            # Ïã§Ìñâ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
            end_time = datetime.now()
            duration = end_time - start_time

            print(f"\\n‚è±Ô∏è Ïã§Ìñâ ÏãúÍ∞Ñ: {duration.total_seconds():.1f}Ï¥à")
            print(f"üîó Google Sheets: https://docs.google.com/spreadsheets/d/{os.getenv('GOOGLE_SHEETS_SHEET_ID')}")

            print(f"\\nüéâ ÏàòÏãù Í∏∞Î∞ò ÏûêÎèôÌôî ÏôÑÎ£å!")
            print("üìä ÏÉùÏÑ±Îêú ÏãúÌä∏Îì§:")
            print("   - Î©îÏù∏Îç∞Ïù¥ÌÑ∞: Ïã§Ï†ú Ï≤òÎ¶¨Îêú Îç∞Ïù¥ÌÑ∞ (Í∞í)")
            print("   - ÏöîÏïΩ: Î©îÏù∏Îç∞Ïù¥ÌÑ∞ Ï∞∏Ï°∞ ÏàòÏãù")
            print("   - ÏÉÅÏúÑÏÑ±Í≥º: ÏûêÎèô Ï†ïÎ†¨ ÏàòÏãù")
            print("   - ÌîºÎ≤óÌÖåÏù¥Î∏î: ÎèôÏ†Å ÏßëÍ≥Ñ ÏàòÏãù")
            print("\\n‚ú® Î©îÏù∏ Îç∞Ïù¥ÌÑ∞Í∞Ä Î≥ÄÍ≤ΩÎêòÎ©¥ Îã§Î•∏ ÏãúÌä∏Îì§Ïù¥ ÏûêÎèôÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏Îê©ÎãàÎã§!")

            # ÏµúÏ¢Ö Í≤∞Í≥º Î°úÍπÖ
            self.result_logger.info(
                f"Formula automation completed successfully - Duration: {duration.total_seconds():.1f}s, "
                f"Contents: {stats.get('total_contents', 0)}, "
                f"Sheets updated: {update_results['overall_success']}"
            )

            return True

        except Exception as e:
            logger.error(f"ÏûêÎèôÌôî Ïã§Ìñâ Ï§ë Ïò§Î•ò: {str(e)}")
            print(f"\\n‚ùå ÏûêÎèôÌôî Ïã§Ìñâ Ïã§Ìå®: {str(e)}")

            # Ïã§Ìñâ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
            end_time = datetime.now()
            duration = end_time - start_time
            print(f"‚è±Ô∏è Ïã§Ìñâ ÏãúÍ∞Ñ: {duration.total_seconds():.1f}Ï¥à")

            # Ïò§Î•ò Î°úÍπÖ
            self.result_logger.error(f"Formula automation failed - Error: {str(e)}, Duration: {duration.total_seconds():.1f}s")

            return False


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    parser = argparse.ArgumentParser(
        description='ÏàòÏãù Í∏∞Î∞ò Appsflyer Îç∞Ïù¥ÌÑ∞ ÏûêÎèôÌôî Ïä§ÌÅ¨Î¶ΩÌä∏',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
ÏÇ¨Ïö© ÏòàÏãú:
  python appsflyer_automation_formula.py --csv Data_dua.csv
  python appsflyer_automation_formula.py --csv Data_dua.csv --backup --export

ÌäπÏßï:
  - Î©îÏù∏ Îç∞Ïù¥ÌÑ∞: Ïã§Ï†ú Í∞íÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
  - ÏöîÏïΩ/ÏÑ±Í≥º/ÌîºÎ≤ó: ÏàòÏãùÏúºÎ°ú Î©îÏù∏ Îç∞Ïù¥ÌÑ∞ Ï∞∏Ï°∞
  - Î©îÏù∏ Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω Ïãú Îã§Î•∏ ÏãúÌä∏Îì§ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏
        """
    )

    parser.add_argument(
        '--csv',
        type=str,
        help='Ï≤òÎ¶¨Ìï† Data_dua.csv ÌååÏùº Í≤ΩÎ°ú',
        default='Data_dua.csv'
    )

    parser.add_argument(
        '--backup',
        action='store_true',
        help='ÏóÖÎç∞Ïù¥Ìä∏ Ï†Ñ ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ'
    )

    parser.add_argument(
        '--export',
        action='store_true',
        help='Ï≤òÎ¶¨Îêú Îç∞Ïù¥ÌÑ∞Î•º CSVÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞'
    )

    parser.add_argument(
        '--verbose',
        action='store_true',
        help='ÏÉÅÏÑ∏ Î°úÍ∑∏ Ï∂úÎ†•'
    )

    args = parser.parse_args()

    # Î°úÍπÖ Î†àÎ≤® ÏÑ§Ï†ï
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    # ÏûêÎèôÌôî Ïã§Ìñâ
    automation = AppsflyerFormulaAutomation()
    success = automation.run(
        csv_path=args.csv,
        backup=args.backup,
        export_csv=args.export
    )

    # Ï¢ÖÎ£å ÏΩîÎìú ÏÑ§Ï†ï
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()